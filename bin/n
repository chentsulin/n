#!/usr/bin/env bash

#
# Setup.
#

# 設定 VERSION 變數為 "1.3.0"
VERSION="1.3.0"


# \033 是 C-Style 的跳脫字元
# \033[<N>A 可以讓 Cursor 往上 N 行，所以 \033[A 就是往上一行
UP=$'\033[A'

# \033[<N>B 可以讓 Cursor 往下 N 行，所以 \033[AB 就是往下一行
DOWN=$'\033[B'


# 如果沒有 N_PREFIX 變數就設定為 /usr/local
N_PREFIX=${N_PREFIX-/usr/local}

# 設定 BASE_VERSIONS_DIR 為 $N_PREFIX 串接 /n/versions
BASE_VERSIONS_DIR=$N_PREFIX/n/versions

#
# All Bin(node/io) configurations
#

# 宣告 BINS 變數為含有 "node"、"io" 兩個元素的陣列
BINS=("node"
      "io")

# 宣告 MIRROR 變數為含有 NODE_MIRROR 變數的值 (沒有的話會是 https://nodejs.org/dist/)、
# IO_MIRROR 變數的值 (沒有的話會是 https://iojs.org/dist/) 兩個元素的陣列
MIRROR=(${NODE_MIRROR-https://nodejs.org/dist/}
        ${IO_MIRROR-https://iojs.org/dist/})

# 宣告 BIN_NAME 變數為含有 "node"、"iojs" 兩個元素的陣列
BIN_NAME=("node"
          "iojs")

# 宣告 VERSIONS_DIR 變數為含有 $BASE_VERSIONS_DIR 和 /node 串接的值、
# $BASE_VERSIONS_DIR 和 /io 串接的值 兩個元素的陣列
VERSIONS_DIR=($BASE_VERSIONS_DIR/node
              $BASE_VERSIONS_DIR/io)

#
# State
#

# 設定 DEFAULT 變數為 0
DEFAULT=0

#
# set_default <bin_name>
#

set_default() {
  # ${#BINS[@] 或 ${#BINS[*]} 都能取到 BINS 陣列長度
  # for (初始設定;繼續條件;迴圈後執行); do
  #   每次迴圈的內容
  # done
  for (( i=0 ; i<${#BINS[@]} ; i++ )); do
    # $1 是函數執行時丟進來的第一個參數
    # test A = B 會在為 True 的時候回傳 0
    # if 判斷式 then
    #   運算式
    # fi
    # 會在判斷式回傳 0 的狀況執行運算式，不為 0 則不執行
    if test ${BINS[$i]} = $1; then
      # 把 DEFAULT 變數設定為符合條件時的 index
      DEFAULT=$i
    fi
  done
}

# 把 VERSIONS_DIR 陣列裡的每個元素當作 dir 然後個跑一次
# for 迴圈內變數名稱 in ${陣列變數名稱[@]}; do
#   每次迴圈的內容
# done
for dir in ${VERSIONS_DIR[@]}; do
  # test -d 會測試如果檔案存在而且是資料夾的話為 True
  # 如果 test 結果為 True 會因為 || 短路，反之則執行右邊運算式
  # mkdir -p 可以自動建立多層目錄，不會因為沒有上層目錄而錯誤
  test -d $dir || mkdir -p $dir
done

#
# Log <type> <msg>
#

# 宣告 log 函數
log() {
  printf "  \033[36m%10s\033[0m : \033[90m%s\033[0m\n" $1 $2
}

#
# Exit with the given <msg ...>
#

# 宣告 abort 函數
# \033[31m -> 31m 是 紅色字
# \033[0m  ->  0m 是 reset
abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

#
# Ensure we have curl or wget support.
#

# 宣告 GET 變數為空字串
GET=

# wget support (Added --no-check-certificate for Github downloads)
command -v wget > /dev/null && GET="wget --no-check-certificate -q -O-"

command -v curl > /dev/null && GET="curl -# -L"

test -z "$GET" && abort "curl or wget required"

#
# Functions used when showing versions installed
#

enter_fullscreen() {
  tput smcup
  stty -echo
}

leave_fullscreen() {
  tput rmcup
  stty echo
}

handle_sigint() {
  leave_fullscreen
  exit $?
}

handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

#
# Output usage information.
#

display_help() {
  cat <<-EOF

  Usage: n [options/env] [COMMAND] [args]

  Environments:
    n [COMMAND] [args]            Uses default env (node)
    n node [COMMAND] [args]       Sets env as node
    n io [COMMAND]                Sets env as io

  Commands:

    n                              Output versions installed
    n latest                       Install or activate the latest node release
    n stable                       Install or activate the latest stable node release
    n <version>                    Install node <version>
    n use <version> [args ...]     Execute node <version> with [args ...]
    n bin <version>                Output bin path for <version>
    n rm <version ...>             Remove the given version(s)
    n prev                         Revert to the previously activated version
    n --latest                     Output the latest node version available
    n --stable                     Output the latest stable node version available
    n ls                           Output the versions of node available

  (iojs):
    n io latest                    Install or activate the latest iojs release
    n io stable                    Install or activate the latest stable iojs release
    n io <version>                 Install iojs <version>
    n io use <version> [args ...]  Execute iojs <version> with [args ...]
    n io bin <version>             Output bin path for <version>
    n io rm <version ...>          Remove the given version(s)
    n io --latest                  Output the latest iojs version available
    n io --stable                  Output the latest stable iojs version available
    n io ls                        Output the versions of iojs available

  Options:

    -V, --version   Output current version of n
    -h, --help      Display help information

  Aliases:

    iojs    io
    which   bin
    use     as
    list    ls
    -       rm

EOF
  exit 0
}

#
# Hide cursor.
#

hide_cursor() {
  printf "\e[?25l"
}

#
# Show cursor.
#

show_cursor() {
  printf "\e[?25h"
}

#
# Output version after selected.
#

next_version_installed() {
  list_versions_installed | grep $selected -A 1 | tail -n 1
}

#
# Output version before selected.
#

prev_version_installed() {
  list_versions_installed | grep $selected -B 1 | head -n 1
}

#
# Output n version.
#

display_n_version() {
  echo $VERSION && exit 0
}

#
# Check for installed version, and populate $active
#

check_current_version() {
  command -v node &> /dev/null
  if test $? -eq 0; then
    local current=$(node --version)
    current=${current#v}
    for bin in ${BINS[@]}; do
      if diff &> /dev/null \
        $BASE_VERSIONS_DIR/$bin/$current/bin/node \
        $(which node) ; then
        active=$bin/$current
      fi
    done
  fi
}

#
# Display sorted versions directories paths.
#

versions_paths() {
  find $BASE_VERSIONS_DIR -maxdepth 2 -type d \
    | sed 's|'$BASE_VERSIONS_DIR'/||g' \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sort -k 1,1n -k 2,2n -k 3,3n -t .
}

#
# Display installed versions with <selected>
#

display_versions_with_selected() {
  selected=$1
  echo
  for version in $(versions_paths); do
    if test "$version" = "$selected"; then
      printf "  \033[36mο\033[0m $version\033[0m\n"
    else
      printf "    \033[90m$version\033[0m\n"
    fi
  done
  echo
}

#
# List installed versions.
#

list_versions_installed() {
  for version in $(versions_paths); do
    echo $version
  done
}

#
# Display current node --version and others installed.
#

display_versions() {
  enter_fullscreen
  check_current_version
  display_versions_with_selected $active

  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  while true; do
    read -n 3 c
    case "$c" in
      $UP)
        clear
        display_versions_with_selected $(prev_version_installed)
        ;;
      $DOWN)
        clear
        display_versions_with_selected $(next_version_installed)
        ;;
      *)
        activate $selected
        leave_fullscreen
        exit
        ;;
    esac
  done
}

#
# Move up a line and erase.
#

erase_line() {
  printf "\033[1A\033[2K"
}

#
# Check if the HEAD response of <url> is 200.
#

is_ok() {
  curl -Is $1 | head -n 1 | grep 200 > /dev/null
}

#
# Determine tarball url for <version>
#

tarball_url() {
  local version=$1
  local uname="$(uname -a)"
  local arch=x86
  local os=

  # from nave(1)
  case "$uname" in
    Linux*) os=linux ;;
    Darwin*) os=darwin ;;
    SunOS*) os=sunos ;;
  esac

  case "$uname" in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=armv6l ;;
    *armv7l*) arch=armv7l ;;
  esac

  if [ ${arch} = "armv6l" -a ${BIN_NAME[$DEFAULT]} = node ]; then
    arch=arm-pi
  fi

  echo "${MIRROR[$DEFAULT]}v${version}/${BIN_NAME[$DEFAULT]}-v${version}-${os}-${arch}.tar.gz"

}

#
# Activate <version>
#

activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir=$BASE_VERSIONS_DIR/$version
    echo $active > $BASE_VERSIONS_DIR/.prev
    cp -fR $dir/bin $dir/lib $dir/share $N_PREFIX
    [[ -d "$dir/include" ]] && cp -fR $dir/include $N_PREFIX
  fi
}

#
# Activate previous node.
#

activate_previous() {
  test -f $BASE_VERSIONS_DIR/.prev || abort "no previous versions activated"
  local prev=$(cat $BASE_VERSIONS_DIR/.prev)
  test -d $BASE_VERSIONS_DIR/$prev || abort "previous version $prev not installed"
  activate $prev
  echo
  log activate $prev
  echo
}

#
# Install <version>
#

install() {
  local version=${1#v}

  local dots=$(echo $version | sed 's/[^.]*//g')
  if test ${#dots} -eq 1; then
    version=$($GET 2> /dev/null ${MIRROR[DEFAULT]} \
      | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | egrep -v '^0\.[0-7]\.' \
      | egrep -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | egrep ^$version \
      | tail -n1)

    test $version || abort "invalid version ${1#v}"
  fi

  local dir=${VERSIONS_DIR[$DEFAULT]}/$version
  local url=$(tarball_url $version)

  if test -d $dir; then
    if [[ ! -e $dir/n.lock ]] ; then
      activate ${BINS[$DEFAULT]}/$version
      exit
    fi
  fi

  echo
  log install ${BINS[$DEFAULT]}-v$version

  is_ok $url || abort "invalid version $version"

  log mkdir $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "sudo required"
  else
    touch $dir/n.lock
  fi

  cd $dir

  log fetch $url
  curl -L# $url | tar -zx --strip 1
  erase_line
  rm -f $dir/n.lock

  activate ${BINS[$DEFAULT]}/$version
  log installed $(node --version)
  echo
}

#
# Remove <version ...>
#

remove_versions() {
  test -z $1 && abort "version(s) required"
  while test $# -ne 0; do
    rm -rf ${VERSIONS_DIR[$DEFAULT]}/${1#v}
    shift
  done
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node
  if test -f $bin; then
    printf "$bin \n"
  else
    abort "$1 is not installed"
  fi
}

#
# Execute the given <version> of node with [args ...]
#

execute_with_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node

  shift # remove version

  if test -f $bin; then
    $bin "$@"
  else
    abort "$version is not installed"
  fi
}

#
# Display the latest release version.
#

display_latest_version() {
  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the latest stable release version.
#

display_latest_stable_version() {
  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep -o '[0-9]+\.[0-9]*[02468]\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the versions available.
#

display_remote_versions() {
  check_current_version
  local versions=""
  versions=$($GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | egrep -v '^0\.[0-7]\.' \
    | egrep -v '^0\.8\.[0-5]$' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }')

  echo
  local bin=${BINS[$DEFAULT]}
  for v in $versions; do
    if test "$active" = "$bin/$v"; then
      printf "  \033[36mο\033[0m $v \033[0m\n"
    else
      if test -d $BASE_VERSIONS_DIR/$bin/$v; then
        printf "    $v \033[0m\n"
      else
        printf "    \033[90m$v\033[0m\n"
      fi
    fi
  done
  echo
}

#
# Handle arguments.
#

if test $# -eq 0; then
  test -z "$(versions_paths)" && abort "no installed version"
  display_versions
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_n_version ;;
      -h|--help|help) display_help ;;
      --latest) display_latest_version; exit ;;
      --stable) display_latest_stable_version; exit ;;
      io|iojs|node) set_default $1;; # set bin and continue
      bin|which) display_bin_path_for_version $2; exit ;;
      as|use) shift; execute_with_version $@; exit ;;
      rm|-) shift; remove_versions $@; exit ;;
      latest) install $($0 ${BINS[$DEFAULT]} --latest); exit ;;
      stable) install $($0 ${BINS[$DEFAULT]} --stable); exit ;;
      ls|list) display_remote_versions; exit ;;
      prev) activate_previous; exit ;;
      *) install $1; exit ;;
    esac
    shift
  done
fi
